plugins {
  id 'org.springframework.boot' version '3.0.0'
  id 'io.spring.dependency-management' version '1.1.0'
//  id 'org.hibernate.orm' version '6.1.5.Final'
  id 'org.graalvm.buildtools.native' version '0.9.18'
  id 'org.asciidoctor.jvm.convert' version '3.3.2'
  id 'jacoco'
  id 'java'
}

group = 'io.spring'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 17

configurations {
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}


dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-hateoas'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.modelmapper:modelmapper:3.1.0'

  implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
  implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'
  developmentOnly('org.springframework.boot:spring-boot-devtools')
  runtimeOnly('com.h2database:h2')
  runtimeOnly('org.postgresql:postgresql')
  annotationProcessor('org.projectlombok:lombok')
  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.11.1'

  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

ext {
  snippetsDir = file('build/generated-snippets')
}

test {
  useJUnitPlatform()
  outputs.dir snippetsDir
  finalizedBy jacocoTestReport // report is always generated after tests run
}

tasks.withType(JavaCompile) {
  configure(options) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:-processing" << "-parameters"
  }
}

jacocoTestReport {
  reports {
    // 원하는 리포트를 켜고 끌 수 있습니다.
    html.enabled true
    xml.enabled false
    csv.enabled false

    //  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//    html.destination file("$buildDir/jacocoHtml")
//    xml.destination file("$buildDir/jacoco.xml")
  }
  dependsOn test // tests are required to run before generating the report
  finalizedBy jacocoTestCoverageVerification
}

jacoco {
  toolVersion = "0.8.8"
//  reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'CLASS'

      limit {
        minimum = 0.7
      }

      excludes = [
          '*.Application',
          '*.ErrorsSerializer'
      ]
    }

    rule {
      // 룰을 간단히 켜고 끌 수 있습니다.
      enabled = true

      // 룰을 체크할 단위는 클래스 단위
      element = 'CLASS'

      // 브랜치 커버리지를 최소한 50% 만족시켜야 합니다.
      limit {
        counter = 'BRANCH'
        value = 'COVEREDRATIO'
        minimum = 0.50
      }

      // 라인 커버리지를 최소한 50% 만족시켜야 합니다.
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.50
      }

      // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
      limit {
        counter = 'LINE'
        value = 'TOTALCOUNT'
        maximum = 200
      }
      excludes = [
          '*.Application',
          '*.ErrorsSerializer'
      ]
    }
  }
}

asciidoctor {
  inputs.dir snippetsDir
  dependsOn test
}

asciidoctor.doLast {
  copy {
    from 'build/docs/asciidoc'
    into 'src/main/resources/static/docs'
  }
}

compileJava.dependsOn(processResources)
